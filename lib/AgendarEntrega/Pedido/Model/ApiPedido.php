<?php
/**
 * ApiPedido
 *
 * PHP version 5
 *
 * @category Class
 * @package  AgendarEntrega\Pedido
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * config.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AgendarEntrega\Pedido\Model;

use \ArrayAccess;
use \AgendarEntrega\Pedido\ObjectSerializer;

/**
 * ApiPedido Class Doc Comment
 *
 * @category Class
 * @package  AgendarEntrega\Pedido
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiPedido implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'apiPedido';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string',
        'codigo' => 'string',
        'comprador' => '\AgendarEntrega\Pedido\Model\AccountUserProfile',
        'fornecedor' => '\AgendarEntrega\Pedido\Model\EntidadeEntidade',
        'emitente' => '\AgendarEntrega\Pedido\Model\EntidadeEntidade',
        'destinatario' => '\AgendarEntrega\Pedido\Model\EntidadeEntidade',
        'dataEmissao' => 'string',
        'observacoes' => 'string',
        'entrega' => '\AgendarEntrega\Pedido\Model\PedidoEntrega',
        'status' => '\AgendarEntrega\Pedido\Model\ApiStatusPedido'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => null,
        'codigo' => null,
        'comprador' => null,
        'fornecedor' => null,
        'emitente' => null,
        'destinatario' => null,
        'dataEmissao' => null,
        'observacoes' => null,
        'entrega' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'codigo' => 'codigo',
        'comprador' => 'comprador',
        'fornecedor' => 'fornecedor',
        'emitente' => 'emitente',
        'destinatario' => 'destinatario',
        'dataEmissao' => 'dataEmissao',
        'observacoes' => 'observacoes',
        'entrega' => 'entrega',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'codigo' => 'setCodigo',
        'comprador' => 'setComprador',
        'fornecedor' => 'setFornecedor',
        'emitente' => 'setEmitente',
        'destinatario' => 'setDestinatario',
        'dataEmissao' => 'setDataEmissao',
        'observacoes' => 'setObservacoes',
        'entrega' => 'setEntrega',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'codigo' => 'getCodigo',
        'comprador' => 'getComprador',
        'fornecedor' => 'getFornecedor',
        'emitente' => 'getEmitente',
        'destinatario' => 'getDestinatario',
        'dataEmissao' => 'getDataEmissao',
        'observacoes' => 'getObservacoes',
        'entrega' => 'getEntrega',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['codigo'] = isset($data['codigo']) ? $data['codigo'] : null;
        $this->container['comprador'] = isset($data['comprador']) ? $data['comprador'] : null;
        $this->container['fornecedor'] = isset($data['fornecedor']) ? $data['fornecedor'] : null;
        $this->container['emitente'] = isset($data['emitente']) ? $data['emitente'] : null;
        $this->container['destinatario'] = isset($data['destinatario']) ? $data['destinatario'] : null;
        $this->container['dataEmissao'] = isset($data['dataEmissao']) ? $data['dataEmissao'] : null;
        $this->container['observacoes'] = isset($data['observacoes']) ? $data['observacoes'] : null;
        $this->container['entrega'] = isset($data['entrega']) ? $data['entrega'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets codigo
     *
     * @return string
     */
    public function getCodigo()
    {
        return $this->container['codigo'];
    }

    /**
     * Sets codigo
     *
     * @param string $codigo codigo
     *
     * @return $this
     */
    public function setCodigo($codigo)
    {
        $this->container['codigo'] = $codigo;

        return $this;
    }

    /**
     * Gets comprador
     *
     * @return \AgendarEntrega\Pedido\Model\AccountUserProfile
     */
    public function getComprador()
    {
        return $this->container['comprador'];
    }

    /**
     * Sets comprador
     *
     * @param \AgendarEntrega\Pedido\Model\AccountUserProfile $comprador comprador
     *
     * @return $this
     */
    public function setComprador($comprador)
    {
        $this->container['comprador'] = $comprador;

        return $this;
    }

    /**
     * Gets fornecedor
     *
     * @return \AgendarEntrega\Pedido\Model\EntidadeEntidade
     */
    public function getFornecedor()
    {
        return $this->container['fornecedor'];
    }

    /**
     * Sets fornecedor
     *
     * @param \AgendarEntrega\Pedido\Model\EntidadeEntidade $fornecedor fornecedor
     *
     * @return $this
     */
    public function setFornecedor($fornecedor)
    {
        $this->container['fornecedor'] = $fornecedor;

        return $this;
    }

    /**
     * Gets emitente
     *
     * @return \AgendarEntrega\Pedido\Model\EntidadeEntidade
     */
    public function getEmitente()
    {
        return $this->container['emitente'];
    }

    /**
     * Sets emitente
     *
     * @param \AgendarEntrega\Pedido\Model\EntidadeEntidade $emitente emitente
     *
     * @return $this
     */
    public function setEmitente($emitente)
    {
        $this->container['emitente'] = $emitente;

        return $this;
    }

    /**
     * Gets destinatario
     *
     * @return \AgendarEntrega\Pedido\Model\EntidadeEntidade
     */
    public function getDestinatario()
    {
        return $this->container['destinatario'];
    }

    /**
     * Sets destinatario
     *
     * @param \AgendarEntrega\Pedido\Model\EntidadeEntidade $destinatario destinatario
     *
     * @return $this
     */
    public function setDestinatario($destinatario)
    {
        $this->container['destinatario'] = $destinatario;

        return $this;
    }

    /**
     * Gets dataEmissao
     *
     * @return string
     */
    public function getDataEmissao()
    {
        return $this->container['dataEmissao'];
    }

    /**
     * Sets dataEmissao
     *
     * @param string $dataEmissao dataEmissao
     *
     * @return $this
     */
    public function setDataEmissao($dataEmissao)
    {
        $this->container['dataEmissao'] = $dataEmissao;

        return $this;
    }

    /**
     * Gets observacoes
     *
     * @return string
     */
    public function getObservacoes()
    {
        return $this->container['observacoes'];
    }

    /**
     * Sets observacoes
     *
     * @param string $observacoes observacoes
     *
     * @return $this
     */
    public function setObservacoes($observacoes)
    {
        $this->container['observacoes'] = $observacoes;

        return $this;
    }

    /**
     * Gets entrega
     *
     * @return \AgendarEntrega\Pedido\Model\PedidoEntrega
     */
    public function getEntrega()
    {
        return $this->container['entrega'];
    }

    /**
     * Sets entrega
     *
     * @param \AgendarEntrega\Pedido\Model\PedidoEntrega $entrega entrega
     *
     * @return $this
     */
    public function setEntrega($entrega)
    {
        $this->container['entrega'] = $entrega;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \AgendarEntrega\Pedido\Model\ApiStatusPedido
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \AgendarEntrega\Pedido\Model\ApiStatusPedido $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



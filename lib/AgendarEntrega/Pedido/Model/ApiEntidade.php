<?php
/**
 * ApiEntidade
 *
 * PHP version 5
 *
 * @category Class
 * @package  AgendarEntrega\Pedido
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * gitlab.com/agendarentrega/servicos/pedido/proto/config.proto
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AgendarEntrega\Pedido\Model;

use \ArrayAccess;
use \AgendarEntrega\Pedido\ObjectSerializer;

/**
 * ApiEntidade Class Doc Comment
 *
 * @category Class
 * @package  AgendarEntrega\Pedido
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiEntidade implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'apiEntidade';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uuid' => 'string',
        'tipo' => '\AgendarEntrega\Pedido\Model\EntidadeTipo',
        'identidadeRaiz' => 'string',
        'nome' => 'string',
        'nomeFantasia' => 'string',
        'dataCadastro' => 'string',
        'logoPersonalizada' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uuid' => null,
        'tipo' => null,
        'identidadeRaiz' => null,
        'nome' => null,
        'nomeFantasia' => null,
        'dataCadastro' => null,
        'logoPersonalizada' => 'boolean'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'tipo' => 'tipo',
        'identidadeRaiz' => 'identidadeRaiz',
        'nome' => 'nome',
        'nomeFantasia' => 'nomeFantasia',
        'dataCadastro' => 'dataCadastro',
        'logoPersonalizada' => 'logoPersonalizada'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'tipo' => 'setTipo',
        'identidadeRaiz' => 'setIdentidadeRaiz',
        'nome' => 'setNome',
        'nomeFantasia' => 'setNomeFantasia',
        'dataCadastro' => 'setDataCadastro',
        'logoPersonalizada' => 'setLogoPersonalizada'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'tipo' => 'getTipo',
        'identidadeRaiz' => 'getIdentidadeRaiz',
        'nome' => 'getNome',
        'nomeFantasia' => 'getNomeFantasia',
        'dataCadastro' => 'getDataCadastro',
        'logoPersonalizada' => 'getLogoPersonalizada'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['tipo'] = isset($data['tipo']) ? $data['tipo'] : null;
        $this->container['identidadeRaiz'] = isset($data['identidadeRaiz']) ? $data['identidadeRaiz'] : null;
        $this->container['nome'] = isset($data['nome']) ? $data['nome'] : null;
        $this->container['nomeFantasia'] = isset($data['nomeFantasia']) ? $data['nomeFantasia'] : null;
        $this->container['dataCadastro'] = isset($data['dataCadastro']) ? $data['dataCadastro'] : null;
        $this->container['logoPersonalizada'] = isset($data['logoPersonalizada']) ? $data['logoPersonalizada'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets tipo
     *
     * @return \AgendarEntrega\Pedido\Model\EntidadeTipo
     */
    public function getTipo()
    {
        return $this->container['tipo'];
    }

    /**
     * Sets tipo
     *
     * @param \AgendarEntrega\Pedido\Model\EntidadeTipo $tipo tipo
     *
     * @return $this
     */
    public function setTipo($tipo)
    {
        $this->container['tipo'] = $tipo;

        return $this;
    }

    /**
     * Gets identidadeRaiz
     *
     * @return string
     */
    public function getIdentidadeRaiz()
    {
        return $this->container['identidadeRaiz'];
    }

    /**
     * Sets identidadeRaiz
     *
     * @param string $identidadeRaiz identidadeRaiz
     *
     * @return $this
     */
    public function setIdentidadeRaiz($identidadeRaiz)
    {
        $this->container['identidadeRaiz'] = $identidadeRaiz;

        return $this;
    }

    /**
     * Gets nome
     *
     * @return string
     */
    public function getNome()
    {
        return $this->container['nome'];
    }

    /**
     * Sets nome
     *
     * @param string $nome nome
     *
     * @return $this
     */
    public function setNome($nome)
    {
        $this->container['nome'] = $nome;

        return $this;
    }

    /**
     * Gets nomeFantasia
     *
     * @return string
     */
    public function getNomeFantasia()
    {
        return $this->container['nomeFantasia'];
    }

    /**
     * Sets nomeFantasia
     *
     * @param string $nomeFantasia nomeFantasia
     *
     * @return $this
     */
    public function setNomeFantasia($nomeFantasia)
    {
        $this->container['nomeFantasia'] = $nomeFantasia;

        return $this;
    }

    /**
     * Gets dataCadastro
     *
     * @return string
     */
    public function getDataCadastro()
    {
        return $this->container['dataCadastro'];
    }

    /**
     * Sets dataCadastro
     *
     * @param string $dataCadastro dataCadastro
     *
     * @return $this
     */
    public function setDataCadastro($dataCadastro)
    {
        $this->container['dataCadastro'] = $dataCadastro;

        return $this;
    }

    /**
     * Gets logoPersonalizada
     *
     * @return bool
     */
    public function getLogoPersonalizada()
    {
        return $this->container['logoPersonalizada'];
    }

    /**
     * Sets logoPersonalizada
     *
     * @param bool $logoPersonalizada logoPersonalizada
     *
     * @return $this
     */
    public function setLogoPersonalizada($logoPersonalizada)
    {
        $this->container['logoPersonalizada'] = $logoPersonalizada;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


